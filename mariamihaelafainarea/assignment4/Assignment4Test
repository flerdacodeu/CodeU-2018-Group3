/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import assignment4.Assignment4;
import assignment4.DijointSet;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicBoolean;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author maria
 */
public class Assignment4Test {
    @Test
    public void simpleTest() {
        int n,m;
        n = 4;
        m = 4;
        boolean[][] matrix = new boolean[n][m];
        matrix[0][0] = false;
        matrix[0][1] = true;
        matrix[0][2] = true;
        matrix[0][3] = true;
                
        matrix[1][0] = true;
        matrix[1][1] = true;
        matrix[1][2] = false; 
        matrix[1][3] = false;
                
        matrix[2][0] = false;
        matrix[2][1] = false;
        matrix[2][2] = true;
        matrix[2][3] = false;
                    
        matrix[3][0] = false;
        matrix[3][1] = false;
        matrix[3][2] = true;
        matrix[3][3] = false;
        assignment4.Assignment4 newInstance = new Assignment4(n, m, matrix);
        int numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 2);
    }
    @Test
    public void biggerMatrix() {
        int n,m;
        n = 5;
        m = 5;
        boolean[][] matrix = new boolean[n][m];
        matrix[0][0] = false;
        matrix[0][1] = true;
        matrix[0][2] = false;
        matrix[0][3] = true;
        matrix[0][4] = false;
                
        matrix[1][0] = true;
        matrix[1][1] = true;
        matrix[1][2] = false; 
        matrix[1][3] = false;
        matrix[1][4] = true;
        
        matrix[2][0] = false;
        matrix[2][1] = false;
        matrix[2][2] = true;
        matrix[2][3] = false;
        matrix[2][4] = false;
        
        matrix[3][0] = false;
        matrix[3][1] = false;
        matrix[3][2] = true;
        matrix[3][3] = false;
        matrix[3][4] = true;
        
        matrix[4][0] = false;
        matrix[4][1] = false;
        matrix[4][2] = true;
        matrix[4][3] = false;
        matrix[4][4] = true;
        assignment4.Assignment4 newInstance = new Assignment4(n, m, matrix);
        int numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 5);
    }
    @Test
    public void noIsland() {
        int n,m;
        n = 4;
        m = 4;
        boolean[][] matrix = new boolean[n][m];
        matrix[0][0] = false;
        matrix[0][1] = false;
        matrix[0][2] = false;
        matrix[0][3] = false;
                
        matrix[1][0] = false;
        matrix[1][1] = false;
        matrix[1][2] = false; 
        matrix[1][3] = false;
                
        matrix[2][0] = false;
        matrix[2][1] = false;
        matrix[2][2] = false;
        matrix[2][3] = false;
                    
        matrix[3][0] = false;
        matrix[3][1] = false;
        matrix[3][2] = false;
        matrix[3][3] = false;
        assignment4.Assignment4 newInstance = new Assignment4(n, m, matrix);
        int numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 0);
    }
     @Test
    public void oneElemMatrix() {
        int n,m;
        n = 0;
        m = 0;
        boolean[][] matrix = new boolean[1][1];
        matrix[0][0] = false;    
        assignment4.Assignment4 newInstance = new Assignment4(n, m, matrix);
        int numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 0);
        matrix[0][0] = true;
        newInstance = new Assignment4(n, m, matrix);
        numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 0);
    }
     @Test
    public void aLotOfIslands() {
        int n,m;
        n = 5;
        m = 5;
        boolean[][] matrix = new boolean[n][m];
        matrix[0][0] = true;
        matrix[0][1] = false;
        matrix[0][2] = true;
        matrix[0][3] = false;
        matrix[0][4] = true;
                
        matrix[1][0] = false;
        matrix[1][1] = true;
        matrix[1][2] = false; 
        matrix[1][3] = true;
        matrix[1][4] = false;
        
        matrix[2][0] = true;
        matrix[2][1] = false;
        matrix[2][2] = true;
        matrix[2][3] = false;
        matrix[2][4] = true;
        
        matrix[3][0] = false;
        matrix[3][1] = true;
        matrix[3][2] = false;
        matrix[3][3] = true;
        matrix[3][4] = false;
        
        matrix[4][0] = true;
        matrix[4][1] = false;
        matrix[4][2] = true;
        matrix[4][3] = false;
        matrix[4][4] = true;
        assignment4.Assignment4 newInstance = new Assignment4(n, m, matrix);
        int numberOfIslands = newInstance.findNumberOfIslandsProcedure();
        assertEquals(numberOfIslands, 13);
    }
    
}
