/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment3;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

/**
 *
 * @author maria
 */
public class Assignment3 {
    //dictionary of the words and the grid
    private final char[][] grid;
    private final MyDictionary dictionary;
    private int n,m;

    public Assignment3() {
        this.grid = null;
        this.dictionary = null;
    }

    public Assignment3(char[][] grid, MyDictionary dictionary) {
        this.grid = grid;
        this.dictionary = dictionary;
        n = grid.length;
        m = grid[0].length;
    }

    //i need many DFS to start from any position
    //ManyDFS has the role to start from any point of the
    //grid and after it verifies if it is a prefix in 
    //the dictionary it can start the DFS from the
    //specific starting point ! 
    //The TreeSet helps me keep the words in order
    public Set<String> manyDFSs() {
        Set<String> theList = new TreeSet<String>();
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m;j++) {
                if (dictionary.isPrefix(String.valueOf(grid[i][j]))) {
                    //visited is used not to take more than once a cell
                    boolean[][] visited = new boolean[n][m];
                    visited[i][j] = true;
                    DFSonGrid(theList,new StringBuilder(String.valueOf(grid[i][j])),i,j,visited);
                    visited[i][j] = false;
                }
            }
        }
        return theList;
    }
    //the neighbours will be vertical horizontal and diagonal.
    //Simple DFS that also verifies if it has
    //any reason to take a new neighbour and
    //to expand the word with that neighbour.
    private void DFSonGrid(Set<String> theList,StringBuilder start,int x,int y,boolean[][] visited) {
        int[] dx = {-1,-1,-1,0,0,1,1,1};
        int[] dy = {-1,0,1,-1,1,-1,0,1};
        for (int i = 0; i < 8; i++) {
            int newX = x + dx[i];
            int newY = y + dy[i];
            if (newX >= 0 && newX < n) {
                if (newY >= 0 && newY < m) {
                    if(visited[newX][newY] == false) {
                        visited[newX][newY] = true;
                        StringBuilder hopa = start.append(grid[newX][newY]);
                        if (dictionary.isPrefix(hopa.toString())){
                            if (dictionary.isWord(hopa.toString())) {
                                theList.add(hopa.toString());
                            }
                            DFSonGrid(theList, hopa, newX, newY,visited);
                        }
                        //restart the state after a deep search ! 
                        start.deleteCharAt(hopa.length()-1);
                        visited[newX][newY] = false;
                    }
                }
            }
        }
        
    }
    //A dictionary based on a trie ! 
    //It has a better complexity than
    //a hashmap !
    class MyDictionary{
        private class TrieNode{
            private HashMap<Character,TrieNode> children;
            private boolean endOfWord;
            public TrieNode() {
                children = new HashMap<>();
                endOfWord = false;
            }
            
        }
        private final TrieNode root;
        //the idea is very simple
        //you start from root
        //you go deep down in the trie 
        //with the current node
        //if theChildren (the character that need to be added)
        //exists you only pass it and go deep down
        public void insert(String word) {
            TrieNode current = root;
            for(int i = 0; i < word.length();i++) {
                TrieNode theChild = current.children.get(word.charAt(i));
                if (theChild == null) {  
                    theChild = new TrieNode();
                    current.children.put(word.charAt(i), theChild);
                }
                current = theChild;
            }
            //after you add the last node and move your
            //current there
            //you mark it as endOfWord
            current.endOfWord = true;
            
        }
        private boolean isGeneralHelper(boolean action,TrieNode current,String word,int index) {
            if(action) {
                if (index == word.length()) {
                    return current.endOfWord;
                }
            } else {
                if (index == word.length()) {
                    return current != null;
                }
            }
            
            TrieNode theChild = current.children.get(word.charAt(index));
            if (theChild == null) {
               return false;
            }
            return isGeneralHelper(action,theChild, word, ++index);
            
        }

        //it will call a recursive function that will 
        //try at each step to find in the children
        //of the node expanded the character from the word
        //the auxiliary function get into recursion
        //with a cut word (shorter) and wait 
        //the end of the word
        //to return the value of endOfWord
        public boolean isWord(String word) {
           return isGeneralHelper(true,root,word,0);
        }
  
        //the idea is similar with the isWord but here
        //you need a node in return.
        //it helps me to know if there
        //something exists and is not the end/ is the end = > prefix
        //something doesn't exists => not a prefix
        public boolean isPrefix(String s) {
            return isGeneralHelper(false,root,s,0);
        }
        public MyDictionary() {
            this.root = new TrieNode();
        }
   
    }   
}
