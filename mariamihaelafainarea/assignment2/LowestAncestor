    /*
     * To change this license header, choose License Headers in Project Properties.
     * To change this template file, choose Tools | Templates
     * and open the template in the editor.
     */

    /**
     *
     * @author maria
     */
    public class LowestAncestor<T> {

        Node first;
        //these parameters help me find
        //if the two values searched were found

        public class Node {
            private T key;
            private Node left,right;

            public Node getRight() {
                return right;
            }

            public void setLeft(Node left) {
                this.left = left;
            }

            public void setKey(T key) {
                this.key = key;
            }

            public void setRight(Node right) {
                this.right = right;
            }

            public Node getLeft() {
                return left;
            }

            public T getKey() {
                return key;
            }

            public Node(T key, Node left, Node right) {
                this.key = key;
                this.left = left;
                this.right = right;
            }
        }
        private Node findLowestAncestor(T x, Node root,T y,AtomicBoolean params1,AtomicBoolean params2){
            //it is a recursive searching
            //of the x,y.
            if (root == null) {
                return null;
            }
            if (root.key.equals(x)) {
                params1.set(true);
            }
            if (root.key.equals(y)) {
                params2.set(true);
            }
            Node left = findLowestAncestor(x, root.left, y,params1,params2); 
            Node right = findLowestAncestor(x, root.right, y,params1,params2); 
            if(root.key.equals(x) || root.key.equals(y)){
                return root;
            }
            //if here are both x and y propagate root.
            if(left != null && right != null){
                return root;
            }
            //propagate what is not null
            if (left != null) {
                return left;
            }
            else if (right != null) {
               return right;
           }
            return null;
        }
        public Node isARealAncestor(T x,T y) {
            //this functions and param1,param2 verifies if "findLowstAncestor"
            //is correct because it can happen
            //to have an x or an y that do not exists
            //in the tree.     
            AtomicBoolean params1 = new AtomicBoolean(false);
            AtomicBoolean params2 = new AtomicBoolean(false);
            Node result = findLowestAncestor(x, first, y,params1,params2);
            if (result == null || !(params1.get() == true && params2.get() == true)) {
                System.out.println("I haven't found what you've been looking!");
                return null;
            } else if (params1.get() == true && params2.get() == true){
            System.out.println("Lowest ancestor of " 
                    + x + " and " + y + " is: " + result.key);
                    return result;
            }
            return null;

        }
     }
