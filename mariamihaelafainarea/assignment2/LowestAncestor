/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author maria
 */
public class LowestAncestor<T> {
    
    private Node first;
    //these parameters help me find
    //if the two values searched were found
    private boolean param1 = false;
    private boolean param2 = false;
    
    public class Node {
        private T key;
        private Node left,right;

        public Node(T key, Node left, Node right) {
            this.key = key;
            this.left = left;
            this.right = right;
        }
    }
    private Node findLowestAncestor(T x, Node root,T y){
        //it is a recursive searching
        //of the x,y.
        if (root == null) {
            return null;
        }
        if (root.key.equals(x)) {
            param1 = true;        
        }
        if (root.key.equals(y)) {
            param2 = true;
        }
        Node left = findLowestAncestor(x, root.left, y); 
        Node right = findLowestAncestor(x, root.right, y); 
        if(root.key.equals(x) || root.key.equals(y)){
            return root;
        }
        //if here are both x and y propagate root.
        if(left != null && right != null){
            return root;
        }
        //propagate what is not null
        if (left != null) {
            return left;
        }
        else if (right != null) {
           return right;
       }
        return null;
    }
    public void isARealAncestor(T x,T y) {
        //this functions and param1,param2 verifies if "findLowstAncestor"
        //is correct because it can happen
        //to have an x or an y that do not exists
        //in the tree.     
        param1 = false;
        param2 = false;
        Node result = findLowestAncestor(x, first, y);
        if (result == null || !(param1 == true && param2 == true)) {
            System.out.println("I haven't found what you've been looking!");
        } else if (param1 == true && param2 == true){
        System.out.println("Lowest ancestor of " 
                + x + " and " + y + " is: " + result.key);
        }

    }
    public static void main(String[] args) {
        LowestAncestor<Integer> low = new LowestAncestor<Integer>();
        low.first = low.new Node(4, null, null);
        low.first.left = low.new Node(5, null, null);
        low.first.right = low.new Node(3, null, null);
        low.first.left.left = low.new Node(8, null, null);
        low.first.left.right = low.new Node(9, null, null);
        low.first.right.left = low.new Node(1, null, null);
        low.first.right.right = low.new Node(15, null, null);
        low.first.right.right.right = low.new Node(7, null, null);
        //             4
        //           /   \
        //          5     3
        //         / \   / \
        //        8   9 1   15
        //                   \
        //                    7
        low.isARealAncestor(5, 5);
        low.isARealAncestor(92, 91);
        low.isARealAncestor(5, 0);
        low.isARealAncestor(8, 9);
        low.isARealAncestor(5, 15);
        low.isARealAncestor(1, 7);
    }
    
}
